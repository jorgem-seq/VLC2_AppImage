--- vlc-2.2.8/share/lua/playlist/anevia_streams.lua
+++ vlc-2.2.8/share/lua/playlist/anevia_streams.lua
@@ -27,7 +27,7 @@
 -- Probe function.
 function probe()
     return vlc.access == "http"
-        and string.match( vlc.path, "list_streams.idp" )
+        and string.match( vlc.path, "/list_streams%.idp" )
 end
 
 -- Parse function.
--- vlc-2.2.8/share/lua/playlist/appletrailers.lua
+++ vlc-2.2.8/share/lua/playlist/appletrailers.lua
@@ -32,24 +32,29 @@
 end
 
 function parse_json(url)
-    vlc.msg.dbg("Trying to parse JSON from " .. url)
-    local json = require ("dkjson")
-
-    -- Use vlc.stream to grab a remote json file, place it in a string,
-    -- decode it and return the decoded data.
+    local json   = require("dkjson")
     local stream = vlc.stream(url)
     local string = ""
     local line   = ""
 
-    if not stream then return false end
+    if not stream then
+        return nil, nil, "Failed creating VLC stream"
+    end
 
     while true do
         line = stream:readline()
-        if not line then break end
+
+        if not line then
+            break
+        end
 
         string = string .. line
     end
 
+    if string == "" then
+        return nil, nil, "Got empty response from server."
+    end
+
     return json.decode(string)
 end
 
@@ -72,7 +77,12 @@
     -- Found a video id
     if video_id ~= nil then
         -- Lookup info from the json endpoint
-        local info = filmid_info(video_id)
+        local info, _, err = filmid_info(video_id)
+
+        if err ~= nil then
+        	vlc.msg.err("Error to parse JSON response from Apple trailers: " .. err)
+        	return playlist
+        end
 
         -- Parse data
         if info["clips"] == nil then
--- vlc-2.2.8/share/lua/playlist/bbc_co_uk.lua
+++ vlc-2.2.8/share/lua/playlist/bbc_co_uk.lua
@@ -22,8 +22,9 @@
 
 -- Probe function.
 function probe()
+    local path = vlc.path:gsub("^www%.", "")
     return vlc.access == "http"
-        and string.match( vlc.path, "bbc.co.uk/iplayer/" )
+        and string.match( path, "^bbc%.co%.uk/iplayer/.+" )
 end
 
 -- Parse function.
--- vlc-2.2.8/share/lua/playlist/break.lua
+++ vlc-2.2.8/share/lua/playlist/break.lua
@@ -20,9 +20,9 @@
 
 -- Probe function.
 function probe()
+    local path = vlc.path:gsub("^www%.", "")
     return vlc.access == "http"
-        and ( string.match( vlc.path, "^break.com" )
-           or string.match( vlc.path, "^www.break.com" ) )
+           and string.match( path, "^break%.com/video/.+" )
 end
 
 -- Parse function.
--- vlc-2.2.8/share/lua/playlist/canalplus.lua
+++ vlc-2.2.8/share/lua/playlist/canalplus.lua
@@ -1,88 +0,0 @@
---[[
- $Id: $
-
- Copyright (c) 2007 the VideoLAN team
-
- This program is free software; you can redistribute it and/or modify
- it under the terms of the GNU General Public License as published by
- the Free Software Foundation; either version 2 of the License, or
- (at your option) any later version.
-
- This program is distributed in the hope that it will be useful,
- but WITHOUT ANY WARRANTY; without even the implied warranty of
- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- GNU General Public License for more details.
-
- You should have received a copy of the GNU General Public License
- along with this program; if not, write to the Free Software
- Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
---]]
-
--- Probe function.
-function probe()
-    return vlc.access == "http" and string.match( vlc.path, "www.canalplus.fr" )
-end
-
--- Parse function.
-function parse()
-    p = {}
-    --vlc.msg.dbg( vlc.path )
-    if string.match( vlc.path, "www.canalplus.fr/.*%?pid=.*" )
-    then -- This is the HTML page's URL
-        local _,_,pid = string.find( vlc.path, "pid(%d-)%-" )
-        local id, name, description, arturl
-        while true do
-            -- Try to find the video's title
-            local line = vlc.readline()
-            if not line then break end
-            -- vlc.msg.dbg( line )
-            if string.match( line, "aVideos" ) then
-                if string.match( line, "CONTENT_ID.*=" ) then
-                    _,_,id = string.find( line, "\"(.-)\"" )
-                elseif string.match( line, "CONTENT_VNC_TITRE" ) then
-                    _,_,arturl = string.find( line, "src=\"(.-)\"" )
-                    _,_,name = string.find( line, "title=\"(.-)\"" )
-                elseif string.match( line, "CONTENT_VNC_DESCRIPTION" ) then
-                    _,_,description = string.find( line, "\"(.-)\"" )
-                end
-                if id and string.match( line, "new Array" ) then
-                    add_item( p, id, name, description, arturl )
-                    id = nil
-                    name = nil
-                    arturl = nil
-                    description = nil
-                end
-            end
-        end
-        if id then
-            add_item( p, id, name, description, arturl )
-        end
-        return p
-    elseif string.match( vlc.path, "embed%-video%-player" ) then
-        while true do
-            local line = vlc.readline()
-            if not line then break end
-            --vlc.msg.dbg( line )
-            if string.match( line, "<hi" ) then
-                local _,_,path = string.find( line, "%[(http.-)%]" )
-                return { { path = path } }
-            end
-        end
-    end
-end
-
-function get_url_param( url, name )
-    local _,_,ret = string.find( url, "[&?]"..name.."=([^&]*)" )
-    return ret
-end
-
-function add_item( p, id, name, description, arturl )
-    --[[vlc.msg.dbg( "id: " .. tostring(id) )
-    vlc.msg.dbg( "name: " .. tostring(name) )
-    vlc.msg.dbg( "arturl: " .. tostring(arturl) )
-    vlc.msg.dbg( "description: " .. tostring(description) )
-    --]]
-    --local path = "http://www.canalplus.fr/flash/xml/configuration/configuration-embed-video-player.php?xmlParam="..id.."-"..get_url_param(vlc.path,"pid")
-    local path = "http://www.canalplus.fr/flash/xml/module/embed-video-player/embed-video-player.php?video_id="..id.."&pid="..get_url_param(vlc.path,"pid")
-    table.insert( p, { path = path; name = name; description = description; arturl = arturl } )
-end
--- vlc-2.2.8/share/lua/playlist/cue.lua
+++ vlc-2.2.8/share/lua/playlist/cue.lua
@@ -21,7 +21,7 @@
 
 -- Probe function.
 function probe()
-    if( not string.match( string.upper( vlc.path ), ".CUE$" ) ) then
+    if( not string.match( vlc.path, "%.[cC][uU][eE]$" ) ) then
         return false
     end
     header = vlc.peek( 2048 )
--- vlc-2.2.8/share/lua/playlist/dailymotion.lua
+++ vlc-2.2.8/share/lua/playlist/dailymotion.lua
@@ -1,10 +1,8 @@
 --[[
-    Translate Daily Motion video webpages URLs to the corresponding
-    FLV URL.
+    Translate Dailymotion video webpages URLs to corresponding
+    video stream URLs.
 
- $Id$
-
- Copyright © 2007-2016 the VideoLAN team
+ Copyright © 2007-2019 the VideoLAN team
 
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
@@ -23,11 +21,8 @@
 
 -- Probe function.
 function probe()
-	if vlc.access ~= "http" and vlc.access ~= "https" then
-        return false
-    end
-
-    return ( string.match( vlc.path, "www.dailymotion.com/video" ) )
+    return ( vlc.access == "http" or vlc.access == "https" )
+        and string.match( vlc.path, "^www%.dailymotion%.com/video/" )
 end
 
 -- Parse function.
@@ -39,6 +34,7 @@
 		if string.match( line, "<meta property=\"og:title\"" ) then
 			_,_,name = string.find( line, "content=\"(.-)\"" )
 			name = vlc.strings.resolve_xml_special_chars( name )
+			name = string.gsub( name, " %- Vidéo dailymotion$", "" )
 		end
 		if string.match( line, "<meta name=\"description\"" ) then
 			_,_,description = string.find( line, "content=\"(.-)\"" )
@@ -46,13 +42,26 @@
                 description = vlc.strings.resolve_xml_special_chars( description )
             end
 		end
-		if string.match( line, "<link rel=\"thumbnail\" type=\"image/jpeg\"" ) then
-			_,_,arturl = string.find( line, "href=\"(.-)\"" )
+		if string.match( line, "<meta property=\"og:image\"" ) then
+			arturl = string.match( line, "content=\"(.-)\"" )
 		end
+    end
 
-        if string.match( line, "var config = {" ) then
+    local video_id = string.match( vlc.path, "^www%.dailymotion%.com/video/([^/?#]+)" )
+    if video_id then
+        local metadata = vlc.stream( vlc.access.."://www.dailymotion.com/player/metadata/video/"..video_id )
+        if metadata then
+            local line = metadata:readline() -- data is on one line only
+
+            -- TODO: fetch "title" and resolve \u escape sequences
+            -- FIXME: use "screenname" instead and resolve \u escape sequences
             artist = string.match( line, '"username":"([^"]+)"' )
 
+            local poster = string.match( line, '"poster_url":"([^"]+)"' )
+            if poster then
+                arturl = string.gsub( poster, "\\/", "/")
+            end
+
             local streams = string.match( line, "\"qualities\":{(.-%])}" )
             if streams then
                 local prefres = vlc.var.inherit(nil, "preferred-resolution")
@@ -83,9 +92,9 @@
     end
 
     if not path then
-        vlc.msg.err("Couldn't extract the video URL from dailymotion")
+        vlc.msg.err("Couldn't extract dailymotion video URL, please check for updates to this script")
         return { }
     end
 
-    return { { path = path; name = name; description = description; url = vlc.path; arturl = arturl; artist = artist } }
+    return { { path = path; name = name; description = description; arturl = arturl; artist = artist } }
 end
--- vlc-2.2.8/share/lua/playlist/extreme.lua
+++ vlc-2.2.8/share/lua/playlist/extreme.lua
@@ -22,10 +22,11 @@
 
 -- Probe function.
 function probe()
+    local path = vlc.path:gsub("^www%.", "")
     return vlc.access == "http"
-        and string.match( vlc.path, "extreme%.com/." )
-        or string.match( vlc.path, "freecaster%.tv/." )
-        or string.match( vlc.path, "player%.extreme%.com/info/.")
+        and ( string.match( vlc.path, "^extreme%.com/.+" )
+        or string.match( vlc.path, "^freecaster%.tv/.+" )
+        or string.match( vlc.path, "^player%.extreme%.com/info/.+") )
 end
 
 -- Parse function.
--- vlc-2.2.8/share/lua/playlist/france2.lua
+++ vlc-2.2.8/share/lua/playlist/france2.lua
@@ -23,7 +23,7 @@
 -- Probe function.
 function probe()
     return vlc.access == "http"
-        and string.match( vlc.path, "jt.france2.fr/player/" )
+        and string.match( vlc.path, "^www%.francetvinfo%.fr/replay%-jt/.+" )
 end
 
 -- Parse function.
--- vlc-2.2.8/share/lua/playlist/googlevideo.lua
+++ vlc-2.2.8/share/lua/playlist/googlevideo.lua
@@ -1,75 +0,0 @@
---[[
- $Id$
-
- Copyright © 2007 the VideoLAN team
-
- This program is free software; you can redistribute it and/or modify
- it under the terms of the GNU General Public License as published by
- the Free Software Foundation; either version 2 of the License, or
- (at your option) any later version.
-
- This program is distributed in the hope that it will be useful,
- but WITHOUT ANY WARRANTY; without even the implied warranty of
- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- GNU General Public License for more details.
-
- You should have received a copy of the GNU General Public License
- along with this program; if not, write to the Free Software
- Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
---]]
-
-function get_url_param( url, name )
-    local _,_,ret = string.find( url, "[&?]"..name.."=([^&]*)" )
-    return ret
-end
-
--- Probe function.
-function probe()
-    return vlc.access == "http"
-        and string.match( vlc.path, "video.google.com" ) 
-        and ( string.match( vlc.path, "videoplay" )
-            or string.match( vlc.path, "videofeed" ) )
-end
-
-function get_arg( line, arg )
-    return string.gsub( line, "^.*"..arg.."=\"(.-)\".*$", "%1" )
-end
-
--- Parse function.
-function parse()
-    local docid = get_url_param( vlc.path, "docid" ) 
-    if string.match( vlc.path, "videoplay" ) then
-        return { { path = "http://video.google.com/videofeed?docid=" .. docid } }
-    elseif string.match( vlc.path, "videofeed" ) then
-        local path = nil
-        local arturl
-        local duration
-        local name
-        local description
-        while true
-        do
-            local line = vlc.readline()
-            if not line then break end
-            if string.match( line, "media:content.*flv" )
-            then
-                local _,_,s = string.find( line, "<media:content(.-)/>" )
-                path = vlc.strings.resolve_xml_special_chars(get_arg( s, "url" ))
-                duration = get_arg( s, "duration" )
-            end
-            if string.match( line, "media:thumbnail" )
-            then
-                local _,_,s = string.find( line, "<media:thumbnail(.-)/>" )
-                arturl = vlc.strings.resolve_xml_special_chars(get_arg( s, "url" ))
-            end
-            if string.match( line, "media:title" )
-            then
-                _,_,name = string.find( line, "<media:title>(.-)</media:title>" )
-            end
-            if string.match( line, "media:description" )
-            then
-                _,_,description = string.find( line, "<media:description>(.-)</media:description>" )
-            end
-        end
-        return { { path = path; name = name; arturl = arturl; duration = duration; description = description } }
-    end
-end
--- vlc-2.2.8/share/lua/playlist/jamendo.lua
+++ vlc-2.2.8/share/lua/playlist/jamendo.lua
@@ -25,7 +25,7 @@
 -- Probe function.
 function probe()
     return vlc.access == "http"
-        and string.match( vlc.path, "api.jamendo.com/" )
+        and string.match( vlc.path, "^api%.jamendo%.com/" )
         and string.match( vlc.path, "get2" )
         and string.match( vlc.path, "track" )
         and string.match( vlc.path, "xml" )
--- vlc-2.2.8/share/lua/playlist/joox.lua
+++ vlc-2.2.8/share/lua/playlist/joox.lua
@@ -1,45 +0,0 @@
---[[
- $Id$
-
- Copyright © 2007 the VideoLAN team
-
- This program is free software; you can redistribute it and/or modify
- it under the terms of the GNU General Public License as published by
- the Free Software Foundation; either version 2 of the License, or
- (at your option) any later version.
-
- This program is distributed in the hope that it will be useful,
- but WITHOUT ANY WARRANTY; without even the implied warranty of
- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- GNU General Public License for more details.
-
- You should have received a copy of the GNU General Public License
- along with this program; if not, write to the Free Software
- Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
---]]
-
--- Probe function.
-function probe()
-    return vlc.access == "http"
-        and string.match( vlc.path, "joox.net" ) or
-            string.match( vlc.path, "/iframe.php%?video=1&" )
-end
-
--- Parse function.
-function parse()
-    vidtitle = ""
-    while true do
-        line = vlc.readline()
-        if not line then break end
-        if string.match( line, "iframe" ) then
-            -- extract the iframe
-            print((string.gsub( line, ".*iframe src=\"([^\"]*).*", "%1" ) ))
-            return { { path = (string.gsub( line, ".*iframe src=\"([^\"]*).*", "%1" )) } }
-        end
-        if string.match( line, "<param name=\"src" ) then
-            -- extract the video url from the iframe
-            print( (string.gsub( line, ".*src\" value=\"([^\"]*).*", "%1" )))
-            return { { path = (string.gsub( line, ".*src\" value=\"([^\"]*).*", "%1" )) } }
-        end
-    end
-end
--- vlc-2.2.8/share/lua/playlist/katsomo.lua
+++ vlc-2.2.8/share/lua/playlist/katsomo.lua
@@ -23,7 +23,7 @@
 -- Probe function.
 function probe()
     return vlc.access == "http"
-        and string.match( vlc.path, "www.katsomo.fi" )
+        and string.match( vlc.path, "^www%.katsomo%.fi/" )
         and ( string.match( vlc.path, "treeId" ) or string.match( vlc.path, "progId" ) )
 end
 
@@ -61,13 +61,13 @@
             name = vlc.strings.resolve_xml_special_chars( name )
             name = vlc.strings.from_charset( "ISO_8859-1", name )
             path = "http://www.katsomo.fi/?treeId="..treeid
-            table.insert( p, { path = path; name = name; url = vlc.path; arturl=arturl; } )
+            table.insert( p, { path = path; name = name; arturl=arturl; } )
         end
         for programid in string.gmatch( line, "<li class=\"program.*\" id=\"program(%d+)\" title=\".+\"" ) do
            description = vlc.strings.resolve_xml_special_chars( find( line, "title=\"(.+)\"" ) )
            description = vlc.strings.from_charset( "ISO_8859-1", description )
            path = "http://www.katsomo.fi/metafile.asx?p="..programid.."&bw=800"
-           table.insert( p, { path = path; name = description; url = vlc.path; arturl=arturl; } )
+           table.insert( p, { path = path; name = description; arturl=arturl; } )
         end
     end
     return p
--- vlc-2.2.8/share/lua/playlist/koreus.lua
+++ vlc-2.2.8/share/lua/playlist/koreus.lua
@@ -19,14 +19,9 @@
 
 -- Probe function.
 function probe()
-    if vlc.access ~= "http" and vlc.access ~= "https" then
-        return false
-    end
-    koreus_site = string.match( vlc.path, "koreus" )
-    if not koreus_site then
-        return false
-    end
-    return (  string.match( vlc.path, "video" )  ) -- http://www.koreus.com/video/pouet.html
+    local path = vlc.path:gsub("^www%.", "")
+    return ( vlc.access == "http" or vlc.access == "https" )
+        and string.match( path, "^koreus%.com/video/.+" )
 end
 
 -- Parse function.
--- vlc-2.2.8/share/lua/playlist/lelombrik.lua
+++ vlc-2.2.8/share/lua/playlist/lelombrik.lua
@@ -22,8 +22,9 @@
 
 -- Probe function.
 function probe()
+    local path = vlc.path:gsub("^www%.", "")
     return vlc.access == "http"
-        and string.match( vlc.path, "lelombrik.net/videos" ) 
+        and string.match( path, "^lelombrik%.net/videos" )
 end
 
 -- Parse function.
--- vlc-2.2.8/share/lua/playlist/metacafe.lua
+++ vlc-2.2.8/share/lua/playlist/metacafe.lua
@@ -20,8 +20,9 @@
 
 -- Probe function.
 function probe()
+    local path = vlc.path:gsub("^www%.", "")
     return vlc.access == "http"
-        and string.match( vlc.path, "metacafe.com" ) 
+        and string.match( vlc.path, "^metacafe%.com/" )
         and (  string.match( vlc.path, "watch/" )
             or string.match( vlc.path, "mediaURL=" ) )
 end
--- vlc-2.2.8/share/lua/playlist/metachannels.lua
+++ vlc-2.2.8/share/lua/playlist/metachannels.lua
@@ -1,60 +0,0 @@
---[[
- $Id$
-
- Copyright © 2010 VideoLAN and AUTHORS
-
- Authors: Rémi Duraffort <ivoire at videolan dot org>
-
- This program is free software; you can redistribute it and/or modify
- it under the terms of the GNU General Public License as published by
- the Free Software Foundation; either version 2 of the License, or
- (at your option) any later version.
-
- This program is distributed in the hope that it will be useful,
- but WITHOUT ANY WARRANTY; without even the implied warranty of
- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- GNU General Public License for more details.
-
- You should have received a copy of the GNU General Public License
- along with this program; if not, write to the Free Software
- Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
---]]
-
-require "simplexml"
-
-function probe()
-    return vlc.access == 'http' and string.match( vlc.path, 'metachannels.com' )
-end
-
-function parse()
-    local webpage = ''
-    while true do
-        local line = vlc.readline()
-        if line == nil then break end
-        webpage = webpage .. line
-    end
-
-    local feed = simplexml.parse_string( webpage )
-    local channel = feed.children[1]
-
-    -- list all children that are items
-    local tracks = {}
-    for _,item in ipairs( channel.children ) do
-        if( item.name == 'item' ) then
-            simplexml.add_name_maps( item )
-            local url = vlc.strings.resolve_xml_special_chars( item.children_map['link'][1].children[1] )
-            local title = vlc.strings.resolve_xml_special_chars( item.children_map['title'][1].children[1] )
-            local arturl = nil
-            if item.children_map['media:thumbnail'] then
-                arturl = vlc.strings.resolve_xml_special_chars( item.children_map['media:thumbnail'][1].attributes['url'] )
-            end
-            table.insert( tracks, { path = url,
-                                    title = title,
-                                    arturl = arturl,
-                                    options = {':play-and-pause'} } )
-        end
-    end
-
-    return tracks
-end
-
--- vlc-2.2.8/share/lua/playlist/mpora.lua
+++ vlc-2.2.8/share/lua/playlist/mpora.lua
@@ -22,8 +22,8 @@
 
 -- Probe function.
 function probe()
-    return vlc.access == "http"
-        and string.match( vlc.path, "video%.mpora%.com/watch/" )
+    return ( vlc.access == "http" or vlc.access == "https" )
+        and string.match( vlc.path, "^mpora%.com/videos/" )
 end
 
 -- Parse function.
--- vlc-2.2.8/share/lua/playlist/newgrounds.lua
+++ vlc-2.2.8/share/lua/playlist/newgrounds.lua
@@ -0,0 +1,78 @@
+--[[
+ $Id$
+
+ Copyright © 2016 the VideoLAN team
+
+ Authors: Pierre Ynard
+
+ This program is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2 of the License, or
+ (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program; if not, write to the Free Software
+ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+--]]
+
+-- Probe function.
+function probe()
+    return ( vlc.access == "http" or vlc.access == "https" )
+        and string.match( vlc.path, "^www%.newgrounds%.com/.*/%d+" )
+end
+
+-- Parse function.
+function parse()
+    local path, title, description, arturl, author
+    while true do
+        local line = vlc.readline()
+        if not line then break end
+
+        if not title then
+            title = string.match( line, "<meta property=\"og:title\" content=\"(.-)\"" )
+            if title then
+                title = vlc.strings.resolve_xml_special_chars( title )
+            end
+        end
+
+        if not description then
+            description = string.match( line, "<meta property=\"og:description\" content=\"(.-)\"" )
+            if description then
+                description = vlc.strings.resolve_xml_special_chars( description )
+            end
+        end
+
+        if not arturl then
+            arturl = string.match( line, "<meta property=\"og:image\" content=\"(.-)\"" )
+            if arturl then
+                arturl = vlc.strings.resolve_xml_special_chars( arturl )
+            end
+        end
+
+        if not author then
+            author = string.match( line, "<em>Author <a [^>]*>([^<]+)</a></em>" )
+            if author then
+                author = vlc.strings.resolve_xml_special_chars( author )
+            end
+        end
+
+        if not path then
+            path = string.match( line, 'new embedController%(%[{"url":"([^"]+)"' )
+            if path then
+                path = string.gsub( path, "\\/", "/" )
+            end
+        end
+    end
+
+    if not path then
+        vlc.msg.err( "Couldn't extract newgrounds media URL" )
+        return { }
+    end
+
+    return { { path = path, name = title, description = description, arturl = arturl, artist = author } }
+end
--- vlc-2.2.8/share/lua/playlist/pinkbike.lua
+++ vlc-2.2.8/share/lua/playlist/pinkbike.lua
@@ -22,8 +22,9 @@
 
 -- Probe function.
 function probe()
+    local path = vlc.path:gsub("^www%.", "")
     return vlc.access == "http"
-        and string.match( vlc.path, "pinkbike.com/video/%d+" )
+        and string.match( path, "^pinkbike%.com/video/%d+" )
 end
 
 -- Parse function.
--- vlc-2.2.8/share/lua/playlist/pluzz.lua
+++ vlc-2.2.8/share/lua/playlist/pluzz.lua
@@ -1,104 +0,0 @@
---[[
- $Id$
-
- Copyright © 2011 VideoLAN
-
- Authors: Ludovic Fauvet <etix at l0cal dot com>
-
- This program is free software; you can redistribute it and/or modify
- it under the terms of the GNU General Public License as published by
- the Free Software Foundation; either version 2 of the License, or
- (at your option) any later version.
-
- This program is distributed in the hope that it will be useful,
- but WITHOUT ANY WARRANTY; without even the implied warranty of
- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- GNU General Public License for more details.
-
- You should have received a copy of the GNU General Public License
- along with this program; if not, write to the Free Software
- Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
---]]
-
--- Probe function.
-function probe()
-    return vlc.access == "http"
-        and string.match( vlc.path, "pluzz.fr/%w+" )
-        or string.match( vlc.path, "info.francetelevisions.fr/.+")
-        or string.match( vlc.path, "france4.fr/%w+")
-end
-
--- Helpers
-function key_match( line, key )
-    return string.match( line, "name=\"" .. key .. "\"" )
-end
-
-function get_value( line )
-    local _,_,r = string.find( line, "content=\"(.*)\"" )
-    return r
-end
-
--- Parse function.
-function parse()
-    p = {}
-
-    if string.match ( vlc.path, "www.pluzz.fr/%w+" ) then
-        while true do
-            line = vlc.readline()
-            if not line then break end
-            if string.match( line, "id=\"current_video\"" ) then
-                _,_,redirect = string.find (line, "href=\"(.-)\"" )
-                print ("redirecting to: " .. redirect )
-                return { { path = redirect } }
-            end
-        end
-    end
-
-    if string.match ( vlc.path, "www.france4.fr/%w+" ) then
-        while true do
-            line = vlc.readline()
-            if not line then break end
-	    -- maybe we should get id from tags having video/cappuccino type instead
-            if string.match( line, "id=\"lavideo\"" ) then
-                _,_,redirect = string.find (line, "href=\"(.-)\"" )
-                print ("redirecting to: " .. redirect )
-                return { { path = redirect } }
-            end
-        end
-    end
-
-    if string.match ( vlc.path, "info.francetelevisions.fr/.+" ) then
-        title = ""
-        arturl = "http://info.francetelevisions.fr/video-info/player_sl/Images/PNG/gene_ftv.png"
-        while true do
-            line = vlc.readline()
-            if not line then break end
-            -- Try to find the video's path
-            if key_match( line, "urls--url--video" ) then
-                video = get_value( line )
-            end
-            -- Try to find the video's title
-            if key_match( line, "vignette--titre--court" ) then
-                title = get_value( line )
-                title = vlc.strings.resolve_xml_special_chars( title )
-                print ("playing: " .. title )
-            end
-            -- Try to find the video's thumbnail
-            if key_match( line, "vignette" ) then
-                arturl = get_value( line )
-                if not string.match( line, "http://" ) then
-                    arturl = "http://info.francetelevisions.fr/" .. arturl
-                end
-            end
-        end
-        if video then
-            -- base url is hardcoded inside a js source file
-            -- see http://www.pluzz.fr/layoutftv/arches/common/javascripts/jquery.player-min.js
-            base_url = "mms://a988.v101995.c10199.e.vm.akamaistream.net/7/988/10199/3f97c7e6/ftvigrp.download.akamai.com/10199/cappuccino/production/publication/"
-            table.insert( p, { path = base_url .. video; name = title; arturl = arturl; } )
-        end
-    end
-
-    return p
-end
-
--- vlc-2.2.8/share/lua/playlist/README.txt
+++ vlc-2.2.8/share/lua/playlist/README.txt
@@ -3,8 +3,8 @@
 
 See lua/README.txt for generic documentation about Lua usage in VLC.
 
-Examples: See dailymotion.lua, googlevideo.lua, metacafe.lua, youtube.lua
-          and youtube_homepage.lua .
+Examples: See liveleak.lua, dailymotion.lua, youtube.lua,
+          soundcloud.lua, cue.lua ...
 
 VLC Lua playlist modules should define two functions:
  * probe(): returns true if we want to handle the playlist in this script
--- vlc-2.2.8/share/lua/playlist/rockbox_fm_presets.lua
+++ vlc-2.2.8/share/lua/playlist/rockbox_fm_presets.lua
@@ -1,27 +1,44 @@
+--[[
+ $Id$
+
+ Copyright © 2009, 2016 the VideoLAN team
+
+ This program is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2 of the License, or
+ (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program; if not, write to the Free Software
+ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+--]]
+
 -- Parser script from Rockbox FM radio presets
 -- See http://www.rockbox.org/wiki/FmPresets
 
+local MRL_base = "v4l2c:///dev/radio0:tuner-frequency="
+
 function probe()
-	if not string.match( vlc.path, ".fmr$" ) then return false end
+	if not string.match( vlc.path, "%.[fF][mM][rR]$" ) then return false end
 	local line = vlc.peek(256)
-	vlc.msg.err(line)
-	local freq = tonumber(string.match( line, "(%d*):" ))
-	if not freq then return false end
-	return freq > 80000000	and freq < 110000000
+	local freq = tonumber(string.match( line, "^[^%d]?[^%d]?[^%d]?[^%d]?(%d+):" )) -- handle BOM
+	return freq and freq > 80000000 and freq < 110000000
 end
 
 function parse()
-	vlc.msg.err("test")
 	local p = {}
 	while true do
-		line = vlc.readline()
+		local line = vlc.readline()
 		if not line then break end
-	vlc.msg.err(line)
-		for freq, name in string.gmatch( line, "(%d*):(.*)" ) do
-			vlc.msg.info(freq)
-			table.insert( p, { path = "v4l2c:///dev/radio0:tuner-frequency="..freq, name = name } )
+		local freq, name = string.match( line, "(%d+):(.*)" )
+                if freq then
+			table.insert( p, { path = MRL_base..freq, name = name } )
 		end
 	end
-vlc.msg.err("test test")
 	return p
 end
--- vlc-2.2.8/share/lua/playlist/soundcloud.lua
+++ vlc-2.2.8/share/lua/playlist/soundcloud.lua
@@ -1,7 +1,7 @@
 --[[
  $Id$
 
- Copyright © 2012, 2015 the VideoLAN team
+ Copyright © 2012, 2015, 2019 the VideoLAN team
 
  Authors: Cheng Sun <chengsun9atgmail.com>
           Pierre Ynard
@@ -23,8 +23,10 @@
 
 -- Probe function.
 function probe()
+    local path = vlc.path
+    path = path:gsub("^www%.", "")
     return ( vlc.access == "http" or vlc.access == "https" )
-        and string.match( vlc.path, "soundcloud%.com/.+/.+" )
+        and string.match( path, "^soundcloud%.com/.+/.+" )
 end
 
 function fix_quotes( value )
@@ -42,30 +44,15 @@
         line = vlc.readline()
         if not line then break end
 
-        if not path then
-            local track = string.match( line, "soundcloud:tracks:(%d+)" )
-            if track then
-                -- API magic
-                local client_id = "WKcQQdEZw7Oi01KqtHWxeVSxNyRzgT8M"
-                -- app_version is not required by the API but we send it
-                -- anyway to remain unconspicuous
-                local app_version = "1505226596"
-
-                local api = vlc.stream( "https://api.soundcloud.com/i1/tracks/"..track.."/streams?client_id="..client_id.."&app_version="..app_version )
-                if not api then
-                    break
-                end
-
-                local streams = api:readline() -- data is on one line only
-                -- For now only quality available is 128 kbps (http_mp3_128_url)
-                path = string.match( streams, "[\"']http_mp3_%d+_url[\"'] *: *[\"'](.-)[\"']" )
-                if path then
-                    -- FIXME: do this properly
-                    path = string.gsub( path, "\\u0026", "&" )
-                end
-            end
+        -- API endpoint for audio stream URL
+        if not stream then
+            -- The URL may feature an optional query string: for private
+            -- tracks in particular it contains a secret token, e.g.
+            -- https://api-v2.soundcloud.com/media/soundcloud:tracks:123456789/986421ee-f9ba-42b2-a642-df8e9761a49b/stream/progressive?secret_token=s-ABCDE
+            stream = string.match( line, '"url":"([^"]-/stream/progressive[^"]-)"' )
         end
 
+        -- Metadata
         if not name then
             name = string.match( line, "[\"']title[\"'] *: *\"(.-[^\\])\"" )
             if name then
@@ -92,6 +79,19 @@
         end
     end
 
+    if stream then
+        -- API magic
+        local client_id = "uzhloVwKlWX9bzQ5F1mrqQdjYxKEqDRM"
+
+        local api = vlc.stream( stream..( string.match( stream, "?" ) and "&" or "?" ).."client_id="..client_id )
+
+        if api then
+            local streams = api:readline() -- data is on one line only
+            -- This API seems to return a single JSON field
+            path = string.match( streams, '"url":"(.-)"' )
+        end
+    end
+
     if not path then
         vlc.msg.err( "Couldn't extract soundcloud audio URL, please check for updates to this script" )
         return { }
--- vlc-2.2.8/share/lua/playlist/twitch.lua
+++ vlc-2.2.8/share/lua/playlist/twitch.lua
@@ -0,0 +1,205 @@
+--[[
+Resolve Twitch channel and video URLs to the actual stream URL
+
+ $Id$
+ Copyright © 2017 the VideoLAN team
+
+ Author: Marvin Scholz <epirat07 at gmail dot com>
+
+ This program is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2 of the License, or
+ (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program; if not, write to the Free Software
+ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+--]]
+
+-- Probe function
+function probe()
+    return (vlc.access == "http" or vlc.access == "https")
+        and ( vlc.path:match("^www%.twitch%.tv/videos/.+") or
+              vlc.path:match("^www%.twitch%.tv/.+") or
+              vlc.path:match("^go%.twitch%.tv/.+") or 
+              vlc.path:match("^go%.twitch%.tv/videos/.+") )
+end
+
+-- Download and parse a JSON document from the specified URL
+-- Returns: obj, pos, err (see dkjson docs)
+function parse_json(url)
+    local json   = require("dkjson")
+    local stream = vlc.stream(url)
+    local string = ""
+    local line   = ""
+
+    if not stream then
+        return nil, nil, "Failed creating VLC stream"
+    end
+
+    while true do
+        line = stream:readline()
+
+        if not line then
+            break
+        end
+
+        string = string .. line
+    end
+
+    return json.decode(string)
+end
+
+-- Make a request to the Twitch API endpoint given by url
+-- Returns: obj, err
+function twitch_api_req(url)
+    local obj, pos, err = parse_json(url .. "?client_id=kimne78kx3ncx6brgo4mv6wki5h1ko")
+
+    if err then
+        return nil, "Error getting JSON object: " .. err
+    end
+
+    -- In case of error, the API will return an object with
+    -- error and message given
+    if obj.error then
+        local err = "Twitch API error: " .. obj.error
+        if obj.message then
+            err = err .. " (" .. obj.message .. ")"
+        end
+        return nil, err
+    end
+
+    return obj, nil
+end
+
+-- Parser for twitch video urls
+function parse_video()
+    local playlist = {}
+    local item = {}
+    local url, obj, err = nil
+
+    -- Parse video id out of url
+    local video_id = vlc.path:match("/videos/(%d+)")
+
+    if video_id == nil then
+        vlc.msg.err("Twitch: Failed to parse twitch url for video id")
+        return playlist
+    end
+
+    vlc.msg.dbg("Twitch: Loading video url for " .. video_id)
+
+    -- Request video token (required for the video stream)
+    url = "https://api.twitch.tv/api/vods/" ..  video_id .. "/access_token"
+    obj, err = twitch_api_req(url)
+
+    if err then
+        vlc.msg.err("Error getting request token from Twitch: " .. err)
+        return playlist
+    end
+
+    -- Construct stream url
+    local stream_url = "http://usher.twitch.tv/vod/" .. video_id
+    stream_url = stream_url .. "?player=twitchweb"
+    stream_url = stream_url .. "&nauth=" .. vlc.strings.encode_uri_component(obj.token)
+    stream_url = stream_url .. "&nauthsig=" .. obj.sig
+    stream_url = stream_url .. "&allow_audio_only=true&allow_source=true"
+
+    item["path"]   = stream_url
+
+    -- Set base information
+    item["name"]   = "Twitch: " .. video_id
+
+    -- Request video information
+    url = "https://api.twitch.tv/kraken/videos/v" .. video_id
+    obj, err = twitch_api_req(url)
+
+    if err then
+        vlc.msg.warn("Error getting video info from Twitch: " .. err)
+        table.insert(playlist, item)
+        return playlist
+    end
+
+    -- Overwrite with now obtained better info
+    item["name"]        = "Twitch: " .. obj.title
+    item["artist"]      = obj.channel.display_name
+    item["description"] = obj.description
+    item["url"]         = vlc.path
+
+    table.insert(playlist, item)
+
+    return playlist
+end
+
+-- Parser for twitch stream urls
+function parse_stream()
+    local playlist = {}
+    local item = {}
+    local url, obj, err = nil
+
+    -- Parse channel name out of url
+    local channel = vlc.path:match("/([a-zA-Z0-9_]+)")
+
+    if channel == nil then
+        vlc.msg.err("Twitch: Failed to parse twitch url for channel name")
+        return playlist
+    end
+
+    vlc.msg.dbg("Twitch: Loading stream url for " .. channel)
+
+    -- Request channel token (required for the stream m3u8)
+    url = "https://api.twitch.tv/api/channels/" .. channel .. "/access_token"
+    obj, err = twitch_api_req(url)
+
+    if err then
+        vlc.msg.err("Error getting request token from Twitch: " .. err)
+        return playlist
+    end
+
+    -- Construct stream url
+    local stream_url = "http://usher.twitch.tv/api/channel/hls/" .. channel .. ".m3u8"
+    stream_url = stream_url .. "?player=twitchweb"
+    stream_url = stream_url .. "&token=" .. vlc.strings.encode_uri_component(obj.token)
+    stream_url = stream_url .. "&sig=" .. obj.sig
+    stream_url = stream_url .. "&allow_audio_only=true&allow_source=true&type=any"
+
+    item["path"]   = stream_url
+
+    -- Set base information
+    item["name"]   = "Twitch: " .. channel
+    item["artist"] = channel
+
+    -- Request channel information
+    url = "https://api.twitch.tv/api/channels/" .. channel
+    obj, err = twitch_api_req(url)
+
+    if err then
+        vlc.msg.warn("Error getting channel info from Twitch: " .. err)
+        table.insert(playlist, item)
+        return playlist
+    end
+
+    -- Overwrite with now obtained better info
+    item["name"]        = "Twitch: " .. obj.display_name
+    item["nowplaying"]  = obj.display_name .. " playing " .. obj.game
+    item["artist"]      = obj.display_name
+    item["description"] = obj.status
+    item["url"]         = vlc.path
+
+    table.insert(playlist, item)
+
+    return playlist
+end
+
+-- Parse function
+function parse()
+    if vlc.path:match("/videos/.+") then
+        return parse_video()
+    else
+        return parse_stream()
+    end
+end
--- vlc-2.2.8/share/lua/playlist/vimeo.lua
+++ vlc-2.2.8/share/lua/playlist/vimeo.lua
@@ -1,7 +1,6 @@
 --[[
- $Id$
 
- Copyright © 2009-2013 the VideoLAN team
+ Copyright © 2009-2019 the VideoLAN team
 
  Authors: Konstantin Pavlov (thresh@videolan.org)
           François Revol (revol@free.fr)
@@ -25,40 +24,30 @@
 -- Probe function.
 function probe()
     return ( vlc.access == "http" or vlc.access == "https" )
-        and ( string.match( vlc.path, "vimeo%.com/%d+$" )
-              or string.match( vlc.path, "player%.vimeo%.com" ) )
-        -- do not match other addresses,
-        -- else we'll also try to decode the actual video url
+        and ( string.match( vlc.path, "^vimeo%.com/%d+" )
+              or string.match( vlc.path, "^vimeo%.com/channels/.-/%d+" )
+              or string.match( vlc.path, "^player%.vimeo%.com/" ) )
 end
 
 -- Parse function.
 function parse()
-    if not string.match( vlc.path, "player%.vimeo%.com" ) then -- Web page URL
+    if string.match( vlc.path, "^player%.vimeo%.com/" ) then
+        -- The /config API will return the data on a single line.
+        -- Otherwise, search the web page for the config.
+        local config = vlc.readline()
         while true do
             local line = vlc.readline()
             if not line then break end
-
-            -- Get the appropriate ubiquitous meta tag
-            -- <meta name="twitter:player" content="https://player.vimeo.com/video/123456789">
-            local meta = string.match( line, "(<meta[^>]- name=\"twitter:player\"[^>]->)" )
-            if meta then
-                local path = string.match( meta, " content=\"(.-)\"" )
-                if path then
-                    path = vlc.strings.resolve_xml_special_chars( path )
-                    return { { path = path } }
-                end
+            if string.match( line, "var config = {" ) then
+                config = line
+                break
             end
         end
 
-        vlc.msg.err( "Couldn't extract vimeo video URL, please check for updates to this script" )
-        return { }
-
-    else -- API URL
-
         local prefres = vlc.var.inherit(nil, "preferred-resolution")
-        local line = vlc.readline() -- data is on one line only
+        local bestres = nil
 
-        for stream in string.gmatch( line, "{([^}]*\"profile\":[^}]*)}" ) do
+        for stream in string.gmatch( config, "{([^}]*\"profile\":[^}]*)}" ) do
             local url = string.match( stream, "\"url\":\"(.-)\"" )
             if url then
                 -- Apparently the different formats available are listed
@@ -85,11 +74,37 @@
             return { }
         end
 
-        local name = string.match( line, "\"title\":\"(.-)\"" )
-        local artist = string.match( line, "\"owner\":{[^}]-\"name\":\"(.-)\"" )
-        local arturl = string.match( line, "\"thumbs\":{\"[^\"]+\":\"(.-)\"" )
-        local duration = string.match( line, "\"duration\":(%d+)[,}]" )
+        local name = string.match( config, "\"title\":\"(.-)\"" )
+        local artist = string.match( config, "\"owner\":{[^}]-\"name\":\"(.-)\"" )
+        local arturl = string.match( config, "\"thumbs\":{\"[^\"]+\":\"(.-)\"" )
+        local duration = string.match( config, "\"duration\":(%d+)[,}]" )
 
         return { { path = path; name = name; artist = artist; arturl = arturl; duration = duration } }
+
+    else -- Video web page
+        local api
+        while true do
+            local line = vlc.readline()
+            if not line then break end
+
+            if string.match( line, "clip_page_config = {" ) then
+                api = string.match( line, '"config_url":"(.-)"' )
+                if api then
+                    api = string.gsub( api, "\\/", "/" )
+                    break
+                end
+            end
+        end
+
+        if not api then
+            vlc.msg.warn( "Couldn't extract vimeo API URL, falling back to preprogrammed URL pattern" )
+
+            local path = string.gsub( vlc.path, "^vimeo%.com/channels/.-/(%d+)", "/%1" )
+            local video_id = string.match( path, "/(%d+)" )
+
+            api = vlc.access.."://player.vimeo.com/video/"..video_id.."/config"
+        end
+
+        return { { path = api } }
     end
 end
--- vlc-2.2.8/share/lua/playlist/vocaroo.lua
+++ vlc-2.2.8/share/lua/playlist/vocaroo.lua
@@ -0,0 +1,53 @@
+--[[
+ $Id$
+
+ Copyright © 2016, 2019 the VideoLAN team
+
+ Authors: Pierre Ynard
+
+ This program is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2 of the License, or
+ (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program; if not, write to the Free Software
+ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+--]]
+
+-- Set to "mp3", "ogg", "flac" or "wav"
+local fmt = "mp3"
+
+-- Probe function.
+function probe()
+    return ( vlc.access == "http" or vlc.access == "https" )
+        and ( string.match( vlc.path, "^old%.vocaroo%.com/i/" )
+            or string.match( vlc.path, "^beta%.vocaroo%.com/." )
+            or string.match( vlc.path, "^vocaroo%.com/." ) )
+end
+
+-- Parse function.
+function parse()
+    -- At the moment, a new/beta platform coexists with the old one:
+    -- classic URLs for old media are redirected to the old platform,
+    -- while new media seems accessible only through the new platform.
+
+    -- With either platform, HTML pages contain no metadata and are not
+    -- worth parsing.
+
+    if string.match( vlc.path, "^old%.vocaroo%.com/" ) then -- Old platform
+        local id = string.match( vlc.path, "vocaroo%.com/i/([^?]*)" )
+        local path = vlc.access.."://old.vocaroo.com/media_command.php?media="..id.."&command=download_"..fmt
+        return { { path = path } }
+    else -- New/beta platform
+        local id = string.match( vlc.path, "vocaroo%.com/([^?]+)" )
+        local path = vlc.access.."://media.vocaroo.com/mp3/"..id
+        return { { path = path } }
+    end
+end
+
--- vlc-2.2.8/share/lua/playlist/youtube_homepage.lua
+++ vlc-2.2.8/share/lua/playlist/youtube_homepage.lua
@@ -1,53 +0,0 @@
---[[
-  Parse YouTube homepage and browse pages. Next step is to recode firefox
-  in VLC ... using Lua of course ;)
-
- $Id$
-
- Copyright © 2007 the VideoLAN team
-
- This program is free software; you can redistribute it and/or modify
- it under the terms of the GNU General Public License as published by
- the Free Software Foundation; either version 2 of the License, or
- (at your option) any later version.
-
- This program is distributed in the hope that it will be useful,
- but WITHOUT ANY WARRANTY; without even the implied warranty of
- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- GNU General Public License for more details.
-
- You should have received a copy of the GNU General Public License
- along with this program; if not, write to the Free Software
- Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
---]]
-
-function probe()
-    return vlc.access == "http" and ( string.match( vlc.path, "youtube.com/%?$" ) or string.match( vlc.path, "youtube.com/browse" ) )
-end
-
-function parse()
-    p = {}
-    while true
-    do
-        line = vlc.readline()
-        if not line then break end
-        for _path, _artist, _name in string.gmatch( line, "href=\"(/watch%?v=[^\"]*)\" onclick=\"_hbLink%('([^']*)','Vid[^\']*'%);\">([^<]*)</a><br/>" )
-        do
-            path = "http://www.youtube.com" .. _path
-            name = vlc.strings.resolve_xml_special_chars( _name )
-            artist = _artist
-        end
-        for _min, _sec in string.gmatch( line, "<span class=\"runtime\">(%d*):(%d*)</span>" )
-        do
-            duration = 60 * _min + _sec
-        end
-        if path and name and artist and duration then
-            table.insert( p, { path = path; name = name; artist = artist; duration = duration } )
-            path = nil
-            name = nil
-            artist = nil
-            duration = nil
-        end
-    end
-    return p
-end
--- vlc-2.2.8/share/lua/playlist/youtube.lua
+++ vlc-2.2.8/share/lua/playlist/youtube.lua
@@ -1,7 +1,7 @@
 --[[
  $Id$
 
- Copyright © 2007-2015 the VideoLAN team
+ Copyright © 2007-2020 the VideoLAN team
 
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
@@ -24,6 +24,12 @@
     return res
 end
 
+-- Helper function to copy a parameter when building a new URL
+function copy_url_param( url, name )
+    local value = get_url_param( url, name )
+    return ( value and "&"..name.."="..value or "" ) -- Ternary operator
+end
+
 function get_arturl()
     local iurl = get_url_param( vlc.path, "iurl" )
     if iurl then
@@ -44,7 +50,7 @@
     end
 
     local fmt = nil
-    for itag,height in string.gmatch( fmt_list, "(%d+)/%d+x(%d+)/[^,]+" ) do
+    for itag,height in string.gmatch( fmt_list, "(%d+)/%d+x(%d+)[^,]*" ) do
         -- Apparently formats are listed in quality
         -- order, so we take the first one that works,
         -- or fallback to the lowest quality
@@ -101,8 +107,11 @@
     end
 
     -- Look for the descrambler function's name
-    -- c&&a.set("signature",br(c));
-    local descrambler = js_extract( js, "%.set%(\"signature\",([^)]-)%(" )
+    -- if(k.s){var l=k.sp,m=pt(decodeURIComponent(k.s));f.set(l,encodeURIComponent(m))}
+    -- k.s (from stream map field "s") holds the input scrambled signature
+    -- k.sp (from stream map field "sp") holds a parameter name (normally
+    -- "signature" or "sig") to set with the output, descrambled signature
+    local descrambler = js_extract( js, "[=%(,&|](..)%(decodeURIComponent%(.%.s%)%)" )
     if not descrambler then
         vlc.msg.dbg( "Couldn't extract youtube video URL signature descrambling function name" )
         return sig
@@ -180,71 +189,129 @@
     return sig
 end
 
--- Parse and pick our video URL
+-- Parse and assemble video stream URL
+function stream_url( params, js_url )
+    local url = string.match( params, "url=([^&]+)" )
+    if not url then
+        return nil
+    end
+    url = vlc.strings.decode_uri( url )
+
+    -- Descramble any scrambled signature and append it to URL
+    local s = string.match( params, "s=([^&]+)" )
+    if s then
+        s = vlc.strings.decode_uri( s )
+        vlc.msg.dbg( "Found "..string.len( s ).."-character scrambled signature for youtube video URL, attempting to descramble... " )
+        if js_url then
+            s = js_descramble( s, js_url )
+        else
+            vlc.msg.err( "Couldn't process youtube video URL, please check for updates to this script" )
+        end
+
+        local sp = string.match( params, "sp=([^&]+)" )
+        if not sp then
+            vlc.msg.warn( "Couldn't extract signature parameters for youtube video URL, guessing" )
+            sp = "signature"
+        end
+        url = url.."&"..sp.."="..vlc.strings.encode_uri_component( s )
+    end
+
+    return url
+end
+
+-- Parse and pick our video stream URL (classic parameters)
 function pick_url( url_map, fmt, js_url )
-    local path = nil
     for stream in string.gmatch( url_map, "[^,]+" ) do
-        -- Apparently formats are listed in quality order,
-        -- so we can afford to simply take the first one
         local itag = string.match( stream, "itag=(%d+)" )
         if not fmt or not itag or tonumber( itag ) == tonumber( fmt ) then
-            local url = string.match( stream, "url=([^&,]+)" )
-            if url then
-                url = vlc.strings.decode_uri( url )
-
-                local sig = string.match( stream, "sig=([^&,]+)" )
-                if not sig then
-                    -- Scrambled signature
-                    sig = string.match( stream, "s=([^&,]+)" )
-                    if sig then
-                        vlc.msg.dbg( "Found "..string.len( sig ).."-character scrambled signature for youtube video URL, attempting to descramble... " )
-                        if js_url then
-                            sig = js_descramble( sig, js_url )
-                        else
-                            vlc.msg.err( "Couldn't process youtube video URL, please check for updates to this script" )
-                        end
-                    end
-                end
-                local signature = ""
-                if sig then
-                    signature = "&signature="..sig
-                end
+            return stream_url( stream, js_url )
+        end
+    end
+    return nil
+end
 
-                path = url..signature
+-- Parse and pick our video stream URL (new-style parameters)
+function pick_stream( stream_map, js_url )
+    local pick = nil
+
+    local fmt = tonumber( get_url_param( vlc.path, "fmt" ) )
+    if fmt then
+        -- Legacy match from URL parameter
+        for stream in string.gmatch( stream_map, '{(.-)}' ) do
+            local itag = tonumber( string.match( stream, '"itag":(%d+)' ) )
+            if fmt == itag then
+                pick = stream
                 break
             end
         end
+    else
+        -- Compare the different available formats listed with our
+        -- quality targets
+        local prefres = vlc.var.inherit( nil, "preferred-resolution" )
+        local bestres = nil
+
+        for stream in string.gmatch( stream_map, '{(.-)}' ) do
+            local height = tonumber( string.match( stream, '"height":(%d+)' ) )
+
+            -- Better than nothing
+            if not pick or ( height and ( not bestres
+                -- Better quality within limits
+                or ( ( prefres < 0 or height <= prefres ) and height > bestres )
+                -- Lower quality more suited to limits
+                or ( prefres > -1 and bestres > prefres and height < bestres )
+            ) ) then
+                bestres = height
+                pick = stream
+            end
+        end
     end
-    return path
-end
 
--- Probe function.
-function probe()
-    if vlc.access ~= "http" and vlc.access ~= "https" then
-        return false
+    if not pick then
+        return nil
     end
-    youtube_site = string.match( string.sub( vlc.path, 1, 8 ), "youtube" )
-    if not youtube_site then
-        -- FIXME we should be using a builtin list of known youtube websites
-        -- like "fr.youtube.com", "uk.youtube.com" etc..
-        youtube_site = string.find( vlc.path, ".youtube.com" )
-        if youtube_site == nil then
-            return false
+
+    -- Either the "url" or the "cipher" parameter is present,
+    -- depending on whether the URL signature is scrambled.
+    local cipher = string.match( pick, '"cipher":"(.-)"' )
+    if cipher then
+        -- Scrambled signature: some assembly required
+        local url = stream_url( cipher, js_url )
+        if url then
+            return url
         end
     end
-    return (  string.match( vlc.path, "/watch%?" ) -- the html page
+    -- Unscrambled signature, already included in ready-to-use URL
+    return string.match( pick, '"url":"(.-)"' )
+end
+
+-- Probe function.
+function probe()
+    return ( ( vlc.access == "http" or vlc.access == "https" )
+             and (
+               string.match( vlc.path, "^www%.youtube%.com/" )
+            or string.match( vlc.path, "^gaming%.youtube%.com/" )
+             ) and (
+               string.match( vlc.path, "/watch%?" ) -- the html page
+            or string.match( vlc.path, "/live$" ) -- user live stream html page
+            or string.match( vlc.path, "/live%?" ) -- user live stream html page
             or string.match( vlc.path, "/get_video_info%?" ) -- info API
             or string.match( vlc.path, "/v/" ) -- video in swf player
             or string.match( vlc.path, "/embed/" ) -- embedded player iframe
-            or string.match( vlc.path, "/player2.swf" ) ) -- another player url
+             ) )
 end
 
 -- Parse function.
 function parse()
+    if string.match( vlc.path, "^gaming%.youtube%.com/" ) then
+        url = string.gsub( vlc.path, "^gaming%.youtube%.com", "www.youtube.com" )
+        return { { path = vlc.access.."://"..url } }
+    end
     if string.match( vlc.path, "/watch%?" )
+        or string.match( vlc.path, "/live$" )
+        or string.match( vlc.path, "/live%?" )
     then -- This is the HTML page's URL
         -- fmt is the format of the video
-        -- (cf. http://en.wikipedia.org/wiki/YouTube#Quality_and_codecs)
+        -- (cf. http://en.wikipedia.org/wiki/YouTube#Quality_and_formats)
         fmt = get_url_param( vlc.path, "fmt" )
         while true do
             -- Try to find the video's title
@@ -269,8 +336,8 @@
                 arturl = vlc.strings.resolve_xml_special_chars( arturl )
             end
 
-            if string.match(line, "\"author\": *\"(.-)\"")    then
-                _,_,artist = string.find(line, "\"author\": *\"(.-)\"")
+            if not artist then
+                artist = string.match(line, '\\"author\\":\\"(.-)\\"')
             end
 
             -- JSON parameters, also formerly known as "swfConfig",
@@ -288,6 +355,7 @@
                     js_url = string.gsub( js_url, "^//", vlc.access.."://" )
                 end
 
+                -- Classic parameters
                 if not fmt then
                     fmt_list = string.match( line, "\"fmt_list\": *\"(.-)\"" )
                     if fmt_list then
@@ -298,39 +366,44 @@
 
                 url_map = string.match( line, "\"url_encoded_fmt_stream_map\": *\"(.-)\"" )
                 if url_map then
+                    vlc.msg.dbg( "Found classic parameters for youtube video stream, parsing..." )
                     -- FIXME: do this properly
                     url_map = string.gsub( url_map, "\\u0026", "&" )
                     path = pick_url( url_map, fmt, js_url )
                 end
 
+                -- New-style parameters
+                if not path then
+                    local stream_map = string.match( line, '\\"formats\\":%[(.-)%]' )
+                    if stream_map then
+                        vlc.msg.dbg( "Found new-style parameters for youtube video stream, parsing..." )
+                        stream_map = string.gsub( stream_map, '\\(["\\/])', '%1' )
+                        -- FIXME: do this properly
+                        stream_map = string.gsub( stream_map, "\\u0026", "&" )
+                        path = pick_stream( stream_map, js_url )
+                    end
+                end
+
                 if not path then
                     -- If this is a live stream, the URL map will be empty
                     -- and we get the URL from this field instead
-                    local hlsvp = string.match( line, "\"hlsvp\": *\"(.-)\"" )
+                    local hlsvp = string.match( line, '\\"hlsManifestUrl\\": *\\"(.-)\\"' )
                     if hlsvp then
                         hlsvp = string.gsub( hlsvp, "\\/", "/" )
                         path = hlsvp
                     end
                 end
-            -- There is also another version of the parameters, encoded
-            -- differently, as an HTML attribute of an <object> or <embed>
-            -- tag; but we don't need it now
             end
         end
 
         if not path then
             local video_id = get_url_param( vlc.path, "v" )
             if video_id then
-                if fmt then
-                    format = "&fmt=" .. fmt
-                else
-                    format = ""
-                end
                 -- Passing no "el" parameter to /get_video_info seems to
                 -- let it default to "embedded", and both known values
-                -- of "embedded" and "detailpage" are wrong and fail for
-                -- various restricted videos, so we pass a different value
-                path = vlc.access.."://www.youtube.com/get_video_info?video_id="..video_id..format.."&el=detail"
+                -- of "embedded" and "detailpage" have historically been
+                -- wrong and failed for various restricted videos.
+                path = vlc.access.."://www.youtube.com/get_video_info?video_id="..video_id..copy_url_param( vlc.path, "fmt" )
                 vlc.msg.warn( "Couldn't extract video URL, falling back to alternate youtube API" )
             end
         end
@@ -349,6 +422,7 @@
     elseif string.match( vlc.path, "/get_video_info%?" ) then -- video info API
         local line = vlc.readline() -- data is on one line only
 
+        -- Classic parameters
         local fmt = get_url_param( vlc.path, "fmt" )
         if not fmt then
             local fmt_list = string.match( line, "&fmt_list=([^&]*)" )
@@ -360,14 +434,27 @@
 
         local url_map = string.match( line, "&url_encoded_fmt_stream_map=([^&]*)" )
         if url_map then
+            vlc.msg.dbg( "Found classic parameters for youtube video stream, parsing..." )
             url_map = vlc.strings.decode_uri( url_map )
             path = pick_url( url_map, fmt )
         end
 
+        -- New-style parameters
+        if not path then
+            local stream_map = string.match( line, '%%22formats%%22%%3A%%5B(.-)%%5D' )
+            if stream_map then
+                vlc.msg.dbg( "Found new-style parameters for youtube video stream, parsing..." )
+                stream_map = vlc.strings.decode_uri( stream_map )
+                -- FIXME: do this properly
+                stream_map = string.gsub( stream_map, "\\u0026", "&" )
+                path = pick_stream( stream_map )
+            end
+        end
+
         if not path then
             -- If this is a live stream, the URL map will be empty
             -- and we get the URL from this field instead
-            local hlsvp = string.match( line, "&hlsvp=([^&]*)" )
+            local hlsvp = string.match( line, "%%22hlsManifestUrl%%22%%3A%%22(.-)%%22" )
             if hlsvp then
                 hlsvp = vlc.strings.decode_uri( hlsvp )
                 path = hlsvp
@@ -379,41 +466,29 @@
             return { }
         end
 
-        local title = string.match( line, "&title=([^&]*)" )
+        local title = string.match( line, "%%22title%%22%%3A%%22(.-)%%22" )
         if title then
             title = string.gsub( title, "+", " " )
             title = vlc.strings.decode_uri( title )
         end
-        local artist = string.match( line, "&author=([^&]*)" )
+        local artist = string.match( line, "%%22author%%22%%3A%%22(.-)%%22" )
         if artist then
             artist = string.gsub( artist, "+", " " )
             artist = vlc.strings.decode_uri( artist )
         end
-        local arturl = string.match( line, "&thumbnail_url=([^&]*)" )
+        local arturl = string.match( line, "%%22playerMicroformatRenderer%%22%%3A%%7B%%22thumbnail%%22%%3A%%7B%%22thumbnails%%22%%3A%%5B%%7B%%22url%%22%%3A%%22(.-)%%22" )
         if arturl then
             arturl = vlc.strings.decode_uri( arturl )
         end
 
         return { { path = path, title = title, artist = artist, arturl = arturl } }
 
-    else -- This is the flash player's URL
-        video_id = get_url_param( vlc.path, "video_id" )
-        if not video_id then
-            _,_,video_id = string.find( vlc.path, "/v/([^?]*)" )
-        end
-        if not video_id then
-            video_id = string.match( vlc.path, "/embed/([^?]*)" )
-        end
+    else -- Other supported URL formats
+        local video_id = string.match( vlc.path, "/[^/]+/([^?]*)" )
         if not video_id then
             vlc.msg.err( "Couldn't extract youtube video URL" )
             return { }
         end
-        fmt = get_url_param( vlc.path, "fmt" )
-        if fmt then
-            format = "&fmt=" .. fmt
-        else
-            format = ""
-        end
-        return { { path = vlc.access.."://www.youtube.com/watch?v="..video_id..format } }
+        return { { path = vlc.access.."://www.youtube.com/watch?v="..video_id..copy_url_param( vlc.path, "fmt" ) } }
     end
 end
--- vlc-2.2.8/share/lua/playlist/zapiks.lua
+++ vlc-2.2.8/share/lua/playlist/zapiks.lua
@@ -22,10 +22,11 @@
 
 -- Probe function.
 function probe()
+    local path = vlc.path:gsub("^www%.", "")
     return vlc.access == "http"
-        and string.match( vlc.path, "zapiks.fr/(.*).html" )
-            or string.match( vlc.path, "zapiks.fr/view/." )
-            or string.match( vlc.path, "26in.fr/videos/." )
+        and ( string.match( vlc.path, "^zapiks%.fr/(.*)%.html" )
+            or string.match( vlc.path, "^zapiks%.fr/view/.+" )
+            or string.match( vlc.path, "^26in%.fr/videos/.+" ) )
 end
 
 -- Parse function.
--- vlc-2.2.8/share/Makefile.am
+++ vlc-2.2.8/share/Makefile.am
@@ -127,28 +127,25 @@
 	lua/playlist/appletrailers.luac \
 	lua/playlist/bbc_co_uk.luac \
 	lua/playlist/break.luac \
-	lua/playlist/canalplus.luac \
 	lua/playlist/cue.luac \
 	lua/playlist/dailymotion.luac \
 	lua/playlist/extreme.luac \
 	lua/playlist/france2.luac \
-	lua/playlist/googlevideo.luac \
 	lua/playlist/jamendo.luac \
-	lua/playlist/joox.luac \
 	lua/playlist/katsomo.luac \
 	lua/playlist/koreus.luac \
 	lua/playlist/lelombrik.luac \
 	lua/playlist/liveleak.luac \
 	lua/playlist/metacafe.luac \
-	lua/playlist/metachannels.luac \
 	lua/playlist/mpora.luac \
+	lua/playlist/newgrounds.luac \
 	lua/playlist/pinkbike.luac \
-	lua/playlist/pluzz.luac \
 	lua/playlist/rockbox_fm_presets.luac \
 	lua/playlist/soundcloud.luac \
+	lua/playlist/twitch.luac \
 	lua/playlist/vimeo.luac \
+	lua/playlist/vocaroo.luac \
 	lua/playlist/youtube.luac \
-	lua/playlist/youtube_homepage.luac \
 	lua/playlist/zapiks.luac \
 	lua/sd/fmc.luac \
 	lua/sd/icecast.luac \
@@ -218,28 +215,25 @@
 	lua/playlist/appletrailers.lua \
 	lua/playlist/bbc_co_uk.lua \
 	lua/playlist/break.lua \
-	lua/playlist/canalplus.lua \
 	lua/playlist/cue.lua \
 	lua/playlist/dailymotion.lua \
 	lua/playlist/extreme.lua \
 	lua/playlist/france2.lua \
-	lua/playlist/googlevideo.lua \
 	lua/playlist/jamendo.lua \
-	lua/playlist/joox.lua \
 	lua/playlist/katsomo.lua \
 	lua/playlist/koreus.lua \
 	lua/playlist/lelombrik.lua \
 	lua/playlist/liveleak.lua \
 	lua/playlist/metacafe.lua \
-	lua/playlist/metachannels.lua \
 	lua/playlist/mpora.lua \
+	lua/playlist/newgrounds.lua \
 	lua/playlist/pinkbike.lua \
-	lua/playlist/pluzz.lua \
 	lua/playlist/rockbox_fm_presets.lua \
 	lua/playlist/soundcloud.lua \
+	lua/playlist/twitch.lua \
 	lua/playlist/vimeo.lua \
+	lua/playlist/vocaroo.lua \
 	lua/playlist/youtube.lua \
-	lua/playlist/youtube_homepage.lua \
 	lua/playlist/zapiks.lua \
 	lua/sd/README.txt \
 	lua/sd/fmc.lua \
--- vlc-2.2.8/share/Makefile.in
+++ vlc-2.2.8/share/Makefile.in
@@ -994,18 +994,19 @@
 	lua/modules/simplexml.lua lua/playlist/README.txt \
 	lua/playlist/anevia_streams.lua lua/playlist/anevia_xml.lua \
 	lua/playlist/appletrailers.lua lua/playlist/bbc_co_uk.lua \
-	lua/playlist/break.lua lua/playlist/canalplus.lua \
+	lua/playlist/break.lua \
 	lua/playlist/cue.lua lua/playlist/dailymotion.lua \
 	lua/playlist/extreme.lua lua/playlist/france2.lua \
-	lua/playlist/googlevideo.lua lua/playlist/jamendo.lua \
-	lua/playlist/joox.lua lua/playlist/katsomo.lua \
+	lua/playlist/jamendo.lua \
+	lua/playlist/katsomo.lua \
 	lua/playlist/koreus.lua lua/playlist/lelombrik.lua \
 	lua/playlist/liveleak.lua lua/playlist/metacafe.lua \
-	lua/playlist/metachannels.lua lua/playlist/mpora.lua \
-	lua/playlist/pinkbike.lua lua/playlist/pluzz.lua \
+	lua/playlist/mpora.lua lua/playlist/newgrounds.lua \
+	lua/playlist/pinkbike.lua \
 	lua/playlist/rockbox_fm_presets.lua \
-	lua/playlist/soundcloud.lua lua/playlist/vimeo.lua \
-	lua/playlist/youtube.lua lua/playlist/youtube_homepage.lua \
+	lua/playlist/soundcloud.lua lua/playlist/twitch.lua \
+	lua/playlist/vimeo.lua lua/playlist/vocaroo.lua \
+	lua/playlist/youtube.lua \
 	lua/playlist/zapiks.lua lua/sd/README.txt lua/sd/fmc.lua \
 	lua/sd/icecast.lua lua/sd/icast.lua lua/sd/jamendo.lua
 appdatadir = $(datadir)/applications
@@ -1081,28 +1082,25 @@
 @BUILD_LUA_TRUE@	lua/playlist/appletrailers.luac \
 @BUILD_LUA_TRUE@	lua/playlist/bbc_co_uk.luac \
 @BUILD_LUA_TRUE@	lua/playlist/break.luac \
-@BUILD_LUA_TRUE@	lua/playlist/canalplus.luac \
 @BUILD_LUA_TRUE@	lua/playlist/cue.luac \
 @BUILD_LUA_TRUE@	lua/playlist/dailymotion.luac \
 @BUILD_LUA_TRUE@	lua/playlist/extreme.luac \
 @BUILD_LUA_TRUE@	lua/playlist/france2.luac \
-@BUILD_LUA_TRUE@	lua/playlist/googlevideo.luac \
 @BUILD_LUA_TRUE@	lua/playlist/jamendo.luac \
-@BUILD_LUA_TRUE@	lua/playlist/joox.luac \
 @BUILD_LUA_TRUE@	lua/playlist/katsomo.luac \
 @BUILD_LUA_TRUE@	lua/playlist/koreus.luac \
 @BUILD_LUA_TRUE@	lua/playlist/lelombrik.luac \
 @BUILD_LUA_TRUE@	lua/playlist/liveleak.luac \
 @BUILD_LUA_TRUE@	lua/playlist/metacafe.luac \
-@BUILD_LUA_TRUE@	lua/playlist/metachannels.luac \
 @BUILD_LUA_TRUE@	lua/playlist/mpora.luac \
+@BUILD_LUA_TRUE@	lua/playlist/newgrounds.luac \
 @BUILD_LUA_TRUE@	lua/playlist/pinkbike.luac \
-@BUILD_LUA_TRUE@	lua/playlist/pluzz.luac \
 @BUILD_LUA_TRUE@	lua/playlist/rockbox_fm_presets.luac \
 @BUILD_LUA_TRUE@	lua/playlist/soundcloud.luac \
+@BUILD_LUA_TRUE@	lua/playlist/twitch.luac \
 @BUILD_LUA_TRUE@	lua/playlist/vimeo.luac \
+@BUILD_LUA_TRUE@	lua/playlist/vocaroo.luac \
 @BUILD_LUA_TRUE@	lua/playlist/youtube.luac \
-@BUILD_LUA_TRUE@	lua/playlist/youtube_homepage.luac \
 @BUILD_LUA_TRUE@	lua/playlist/zapiks.luac lua/sd/fmc.luac \
 @BUILD_LUA_TRUE@	lua/sd/icecast.luac lua/sd/icast.luac \
 @BUILD_LUA_TRUE@	lua/sd/jamendo.luac $(NULL) $(am__append_2)
